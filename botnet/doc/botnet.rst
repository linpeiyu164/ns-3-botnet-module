Botnet Module and Applications
==============================

Model Description
-----------------

The botnet model utilizes BRITE and ns-3 to efficiently create customizable topology and
attack applications for DDoS dataset generation. Applications include pulsing attack,
link flooding attack, and benign traffic generation.

Design
~~~~~~

By basing our module on BRITE, we first generate a BRITE topology as the basis for our
network. We assume that bots and benign users reside at the leaf nodes of our network.
and run our applications on the leaf nodes of the topology. Technically, the leaf nodes
are routers in the BRITE topology design, however, we view the leaf routers as the
aggregation of traffic generated by the benign nodes or bots that reside beyond the leaf
node in the local network. This is beneficial for simulations that require a lot of
nodes, since it decreases the number of actual nodes simulated in ns-3 and cuts back on
resources and simulation time.

There are some main components in the design: ``Botnet``, ``BotnetHelper``, and
different applications that can be installed onto the nodes, ex: ``PulsingAttackBot``,
``PulsingAttackCC``, ``LinkFloodingAttack``, ``LinkFloodingAttackCC``,
``BenignApplication``. Usages of these components in coordination with existing ns-3
applications such as ``V4Ping`` and ``V4TraceRoute`` are shown in the ``example``
folder.

``Botnet`` contains the main information regarding the network nodes. Initially, it
contained only bot and central controller nodes. However, with the addition of benign
traffic application, benign node information was also added to the ``Botnet`` class.

``BotnetHelper`` performs the initialization of the ``Botnet`` type by assigning roles
such as benign, bot, and central controller to the nodes in the network. In addition,
users will mainly interact with the nodes through this helper class. Actions such as
adding and installing applications and setting attributes will be done through its APIs.

Applications
++++++++++++

Pulsing Attack
..............

The overall procedure of a simulated pulsing attack is shown in the figure below:
..figure:: figures/pulsing-attack-procedure.*

1. Bots ping both the central controller(bot master) and the target node.

2. The round-trip-time from the bot pings are collected through the RTT trace source in
the existing `V4Ping` application.

3. The central controller schedules the bots and sends each bot a packet to signal them
to start sending attack packets

4. On receival of the signal from the central controller, the bots start to send attack
packets periodically.

LinkFloodingAttack
..................

The overall procedure of a simulated link flooding attack is shown in the figure below:
.. figure:: figures/link-flooding-attack-procedure.*

1. Each bot does pairwise traceroutes to all other bots

2. By adding an additional trace source to the existing `V4TraceRoute` application, we
are able to collect the route information and save it to both the bots and the central
controller. The changed file is saved in `botnet/changes/v4traceroute.cc`.

3. The central controller then calculates the most used link(based on the IPv4 address
of the node), and sends the target link address to all the bots.

4. The bots search through their traceroute information to find the corresponding routes
that pass through that node and set the remote to those paired bot addresses.

5. They start sending attack packets to the paired bot addresses to flood the targeted
   link.

Scope
~~~~~

The botnet module is currently able to simulate distributed pulsing attacks with a
central controller in a BRITE topology.

In addition, users are able to simulate benign background traffic that follows a certain
random distribution. Current research usually add real world benign traffic directly on
top of generated malicious traffic, making it difficult to estimate the impacts on
benign traffic caused by the malicious traffic.

Since data volume generally conforms to lognormal traffic, it is recommended that the
DataRate is set to the LogNormalRandomVariable. However, users can choose from (1)
LogNormal (2) Normal (3) Constant (4) Uniform Random Variables to set the DataRate and
PacketSize variables in the benign traffic application.

Limitations (Future work)
~~~~~~~~~~~~~~~~~~~~~~~~~

Long term goal of this project is to be able to simulate realistic DDoS scenarios and
generate DDoS datasets for research purposes. Currently, this module supports the
generation of pulsing DDoS attacks. Some possible future directions are: - Imitate
existing botnet family behavior. Some botnet families follow specific behaviors, ex. use
specific protocols. This could make the dataset more realistic. - Add additional flow
monitoring information. Allowing users to extract flow information for further analysis.
- Add custom packet tags specifically designed for DDoS detection, ex. malicious
packets/benign packets.

References
~~~~~~~~~~

TODO

Usage
-----

This section is principally concerned with the usage of your model, using the public
API. Focus first on most common usage patterns, then go into more advanced topics.

Building New Module
~~~~~~~~~~~~~~~~~~~

Install the BRITE library and configure ns-3 to use the library.

``./ns3 configure --with-brite=<BRITE_path> --enable-examples --enable-tests``

Helpers
~~~~~~~
Main interfaces of ``BotnetHelper``:
- ``CreateBotnet`` sets up the botnet, including choosing the bots from our topology.
This is done by randomly picking a maximum of maxBotsPerAs from each existing AS in
our topology.
- ``AddApplication``: Adding applications to benign/bot/central controller nodes.
- ``SetAttributeBot``, ``SetAttributeCC``, ``SetAttributeBenign``:
Set attributes of the added applications on the bots, central controller, and benign nodes.
The application index is needed to specify which application we are configurating.
- ``InstallApplications``: Install the added applications onto the central controller and bots.

Model Attributes
~~~~~~~~~~~~~~~~

PulsingAttackBot
----------------

- ``ReceivePort``: The receiving port. Default value of 8000.
- ``PacketSize``: Packet size of attack packets. Default value of 100.
- ``TargetPort``: The target port that will receive the attack packets. Default value of
  8081.
- ``TargetAddress``: Target address that will receive the attack packets.
- ``CCAddress``: Central controller address.
- ``Rounds``: The number of attack rounds.
- ``AttackInterval``: The interval between each round of attack.
- ``CCPort``: Central controller port that to communicate with the bot.

PulsingAttackCC
---------------

- ``ReceivePort``: The receiving port. Default value of 8080.
- ``PacketSize``: Packet size of the command packet from central controller to bots.
- ``RemotePort``: Port of the bot that will receive the command packet.
- ``AttackTime``: The time gap between bot connection and attack. This value is needed
  because we have to wait for all bot connections to be finished.

LinkFloodingAttack
------------------
- ``TargetAddress``: Ipv4 address of target link.
- ``RemotePort``: Remote port on paired bot.
- ``PacketSize``: Packet size to send to the remote address.
- ``Interval``: Interval between sends.
- ``WaitForRouteMap``: Time needed to wait for traceroute to populate route map.
- ``WaitForReceive``: Time needed to wait for traceroute to populate route map.
- ``CCAddress``: The Ipv4 address of the central controller.
- ``CCPort``: Port of central controller.

LinkFloodingAttackCC
--------------------
- ``ListenPort``: Port to listen for bot connections on.
- ``WaitForTraceRoute``: Time to wait for all traceroutes to complete.

BenignApplication
-----------------
- ``TargetAddress``: Target address of packet sink.
- ``TargetPort``: Target port on packet sink that will receive the attack packets.
- ``PacketSizeRandomVariableType``: Type of random variable for packet size. If the user wants to change the random variable type for the packet size, this value should be changed. Supported types include: ``ns3::NormalRandomVariable``, ``ns3::LogNormalRandomVariable``, ``ConstantRandomVariable``, ``UniformRandomVariable``.
- ``PacketSizeRandomVariable``: Packet size random variable stream (bytes).
- ``PacketSizeMean``: Mean value of packet size random variable (bytes).
- ``PacketSizeStdDev``: Standard deviation of packet size random variable (bytes).
- ``DataRateRandomVariableType``: Type of random variable for data rate.
- ``DataRateRandomVariable``: Data rate random variable stream (bit/sec).
- ``DataRateMean``: Mean value of data rate random variable (bit/sec).
- ``DataRateStdDev``: Standard deviation value of data rate random variable (bit/sec).

Output
~~~~~~
By adding `EnablePcap()` to the channel devices, it is possible to generate packet traces from
the attack simulations.

Advanced Usage
~~~~~~~~~~~~~~

Users can create their own attack application models to install on the botnet and
collect the resulting traces.

Examples
~~~~~~~~

``botnet-example`` and ``botnet-example-2`` differ by the size of the target network.
For the former, we manually attach the target node to a leaf node of AS 0. For the
latter, the target network topology is shown in
``examples/botnet-example-2-target-network.png``.

Troubleshooting
~~~~~~~~~~~~~~~

When debugging, do: ``./ns3 run botnet-example > logfile.txt 2>&1`` to print out the
logs. This saves the logs in a file and makes it easier to debug.
